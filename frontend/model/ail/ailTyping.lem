open import Pervasives AilSyntax AilTypesAux AilWf Utils ErrorMonad Ctype TypingError
import IntegerImpl

(* following the table from (ยง6.4.4.1#5) *)
val type_of_constant: Loc.t -> IntegerImpl.implementation -> integerConstant -> errorM integerType
let type_of_constant loc impl = function
  | IConstant n Decimal Nothing ->
      if in_integer_range impl n (Signed Int_) then
        return (Signed Int_)
      else if in_integer_range impl n (Signed Long) then
        return (Signed Long)
      else if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  (* Octal or Hexadecimal *)
  | IConstant n _ Nothing ->
      if in_integer_range impl n (Signed Int_) then
        return (Signed Int_)
      else if in_integer_range impl n (Unsigned Int_) then
        return (Unsigned Int_)
      else if in_integer_range impl n (Signed Long) then
        return (Signed Long)
      else if in_integer_range impl n (Unsigned Long) then
        return (Unsigned Long)
      else if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
    (* Octal, Decimal or Hexadecimal *)
  | IConstant n _ (Just U) ->
      if in_integer_range impl n (Unsigned Int_) then
        return (Unsigned Int_)
      else if in_integer_range impl n (Unsigned Long) then
        return (Unsigned Long)
      else if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  | IConstant n Decimal (Just L) ->
      if in_integer_range impl n (Signed Long) then
        return (Signed Long)
      else if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  (* Octal or Hexadecimal *)
  | IConstant n _ (Just L) ->
      if in_integer_range impl n (Signed Long) then
        return (Signed Long)
      else if in_integer_range impl n (Unsigned Long) then
        return (Unsigned Long)
      else if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  (* Octal, Decimal or Hexadecimal *)
  | IConstant n _ (Just UL) ->
      if in_integer_range impl n (Unsigned Long) then
        return (Unsigned Long)
      else if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  | IConstant n Decimal (Just LL) ->
      if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  (* Octal or Hexadecimal *)
  | IConstant n _ (Just LL) ->
      if in_integer_range impl n (Signed LongLong) then
        return (Signed LongLong)
      else if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  (* Octal, Decimal or Hexadecimal *)
  | IConstant n _ (Just ULL) ->
      if in_integer_range impl n (Unsigned LongLong) then
        return (Unsigned LongLong)
      else
        misc loc (UntypableIntegerConstant n)
  | IConstant n _ (Just B) ->
      misc loc (UntypableIntegerConstant n)
  | IConstantMax ity ->
      return ity
  | IConstantMin ity ->
      return ity
end

val disjoint_bindings: bindings -> bool
let rec disjoint_bindings bs =
  match bs with
    | [] -> true
    | (a, _) :: xs ->
      List.all (fun (b, _) -> a <> b) xs && disjoint_bindings xs
  end

val well_formed_bindings: forall 'a. Loc.t -> sigma 'a -> bindings -> errorM unit
let well_formed_bindings loc sigm bindings =
  mapM_ (fun (_, (_, _, qs, ty)) -> wf_lvalue sigm qs ty) bindings >>
  if not (disjoint_bindings bindings) then
    error "AilTyping.well_formed_bindings: found non disjoint bindings"
  else
    return ()

