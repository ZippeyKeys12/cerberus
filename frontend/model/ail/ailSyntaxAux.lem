open import Pervasives AilTypesAux AilSyntax Loc Ctype
import Cmm_csem Builtins

(* Removes non-semantic constructor from a expression. Pattern matching with mor
   than one level of unfolding should usually only be done on stripped expressions *)
val     strip_expression: forall 'a. expression 'a -> expression 'a
let rec strip_expression (AnnotatedExpression _ _ _ expr_ as expr) =
  match expr_ with
    | AilEannot _ e ->
        strip_expression e
    | AilEprint_type e ->
        strip_expression e
    | _ ->
        expr
  end

(* STD ยง6.3.2.3#3, sentence 1 *)
val is_null_pointer_constant: forall 'a. expression 'a -> bool
let rec is_null_pointer_constant expr =
  let AnnotatedExpression _ _ _ expr_ = strip_expression expr in
  match expr_ with
    | AilEconst ConstantNull ->
        true
    | AilEconst (ConstantInteger (IConstant n _ _)) ->
        n = 0
    | AilEcast cast_qs (Ctype _ (Pointer referenced_qs (Ctype _ Void))) e ->
        is_null_pointer_constant e && is_unqualified cast_qs && is_unqualified referenced_qs
    | AilEatomic e ->
        is_null_pointer_constant e
    | _ ->
        (* TODO: should this return true for 'ConstantPredefined PConstantFalse' ? *)
        false
  end

val memory_order_of_expr: forall 'a. expression 'a -> maybe Cmm_csem.memory_order
let memory_order_of_expr (AnnotatedExpression _ _ _ expr) =
  match expr with
    | AilEconst (ConstantInteger (IConstant n _ _)) -> Builtins.decode_memory_order $ natFromInteger n
    | _ -> Nothing
  end

val sigma_fresh_bindings: forall 'a. bindings -> sigma 'a -> bool
let sigma_fresh_bindings bs S =
  List.all (fun (ident, _) ->
    match List.lookup ident S.declarations with
      | Just _ -> false
      | Nothing -> true
    end) bs
