open import Pervasives

import Symbol AilTypesAux
open import Utils Ctype
import Map_extra

(* SEE src/tags.mli for the documentation *)
val tagDefs: unit -> map Symbol.sym (Loc.t * tag_definition)
val set_tagDefs: map Symbol.sym (Loc.t * tag_definition) -> unit
val with_tagDefs: forall 'a. map Symbol.sym (Loc.t * tag_definition) -> (unit -> 'a) -> 'a

declare ocaml target_rep function tagDefs = `Tags.tagDefs`
declare ocaml target_rep function set_tagDefs = `Tags.set_tagDefs`
declare ocaml target_rep function with_tagDefs = `Tags.with_tagDefs`

declare hol target_rep function tagDefs = `tagDefs`
declare hol target_rep function set_tagDefs = `set_tagDefs`
declare hol target_rep function with_tagDefs = `with_tagDefs`

val get_membersDefs: Symbol.sym -> tag_definition
let get_membersDefs tag_sym =
  snd $ fromJust "Ctype_aux.get_membersDefs" (Map.lookup tag_sym (tagDefs ()))

val get_membersDefs_with_tagDefs: map Symbol.sym tag_definition -> Symbol.sym -> tag_definition
let get_membersDefs_with_tagDefs tagDefs tag_sym =
  fromJust ("Ctype_aux._with_tagDefs[" ^ show tag_sym ^ "]") (Map.lookup tag_sym tagDefs)

val get_structDef_with_tagDefs: map Symbol.sym (Loc.t * tag_definition) -> Symbol.sym -> list (Symbol.identifier * (Annot.attributes * maybe alignment * qualifiers * ctype)) * maybe Ctype.flexible_array_member
let get_structDef_with_tagDefs tagDefs tag_sym =
  match Map.lookup tag_sym tagDefs with
    | Just (_, StructDef xs flexible_opt) ->
        (xs, flexible_opt)
    | Just _ ->
        error ("Core_type.aux.get_structDef_with_tagDefs (" ^ show tag_sym ^
               "): found a union definition instead of a struct")
    | Nothing ->
        error ("Core_type.aux.get_structDef_with_tagDefs (" ^ show tag_sym ^
               "): couldn't find a struct/union definition")
  end

val get_structDef: Symbol.sym -> list (Symbol.identifier * (Annot.attributes * maybe alignment * qualifiers * ctype)) * maybe Ctype.flexible_array_member
let get_structDef tag_sym =
  get_structDef_with_tagDefs (tagDefs ()) tag_sym


val get_unionDef: Symbol.sym -> (Symbol.identifier * (Annot.attributes * maybe alignment * qualifiers * ctype)) * list (Symbol.identifier * (Annot.attributes * maybe alignment * qualifiers * ctype))
let get_unionDef tag_sym =
  match Map.lookup tag_sym (tagDefs ()) with
    | Just (_, UnionDef []) ->
        error ("Core_type.aux.get_unionDef (" ^ show tag_sym ^
               "): found an empty union definition")
    | Just (_, UnionDef (x::xs)) ->
        (x, xs)
    | Just _ ->
        error ("Core_type.aux.get_unionDef (" ^ show tag_sym ^
               "): found a struct definition instead of a union")
    | Nothing ->
        error ("Core_type.aux.get_unionDef (" ^ show tag_sym ^
               "): couldn't find a struct/union definition")
  end

val reset_tagDefs: unit -> unit
declare ocaml target_rep function reset_tagDefs = `Tags.reset_tagDefs`




val     are_compatible_aux: (map Symbol.sym (Loc.t * tag_definition) * map Symbol.sym (Loc.t * tag_definition)) -> (qualifiers * ctype) -> (qualifiers * ctype) -> bool
let rec are_compatible_aux ((tagDefs1, tagDefs2) as env) (qs1, Ctype _ ty1) (qs2, Ctype _ ty2) =
  let are_compatible_aux qs_ty1 qs_ty2 = are_compatible_aux (tagDefs1, tagDefs2) qs_ty1 qs_ty2 in
  (* qualifiers need to be equal (see §6.7.3#10) *)
  qs1 = qs2 && match (ty1, ty2) with
    | (Void, Void) ->
        true
    | (Basic bty1, Basic bty2) ->
        AilTypesAux.are_compatible (qs1, Ctype [] (Basic bty1)) (qs2, Ctype [] (Basic bty2))
    | (Array elem_ty1 n1_opt, Array elem_ty2 n2_opt) ->
        (* STD §6.7.6.2#6 *)
           are_compatible_aux (no_qualifiers, elem_ty1) (no_qualifiers, elem_ty2)
        && match (n1_opt, n1_opt) with
             | (Just n1, Just n2) -> n1 = n2
             | (Just _ , Nothing) -> true
             | (Nothing, Just _ ) -> true
             | (Nothing, Nothing) -> true
           end
    | (Function (ret_qs1, ret_ty1) params1 isVariadic1, Function (ret_qs2, ret_ty2) params2 isVariadic2) ->
        (* STD §6.7.6.3#15 *)
        (* TODO: when the two types do not both have a param list *)
           are_compatible_aux (ret_qs1, ret_ty1) (ret_qs2, ret_ty2)
        && are_compatible_params env params1 params2
        && isVariadic1 = isVariadic2
    | (Pointer ref_qs1 ref_ty1, Pointer ref_qs2 ref_ty2) ->
        (* STD §6.7.6.1#2 *)
        are_compatible_aux (ref_qs1, ref_ty1) (ref_qs2, ref_ty2)
    | (Struct tag1, Struct tag2) ->
        (* STD §6.2.7#1 *)
        (* TODO: being conservative here (aka STD compliant) *)
        if Symbol.from_same_translation_unit tag1 tag2 then
          tag1 = tag2
        else
          let (tag_str1, tag_str2) =
            match (tag1, tag2) with
              | (Symbol.Symbol _ _ (Symbol.SD_Id tag_str1), Symbol.Symbol _ _ (Symbol.SD_Id tag_str2)) ->
                  (tag_str1, tag_str2)
              | _ ->
                  error "Ctype_aux.are_compatible_aux: failed to destruct a struct tag"
            end in
          if tag_str1 = tag_str2 then
            match (Map.lookup tag1 tagDefs1, Map.lookup tag2 tagDefs2) with
              | (Nothing, Nothing) ->
                  true
              | (Just _, Nothing) ->
                  true
              | (Nothing, Just _) ->
                  true
              | (Just (_, StructDef xs1 flexible_opt1), Just (_, StructDef xs2 flexible_opt2)) ->
                  if List.length xs1 <> List.length xs2 then
                    false
                  else
                    List.all (fun ((ident1, (_, _(*TODO alignment*), qs1, ty1)), (ident2, (_, _(*TODO alignment*), qs2, ty2))) ->
                      ident1 = ident2 && are_compatible_aux (qs1, ty1) (qs2, ty2)
                    ) (List.zip xs1 xs2) &&
                    match (flexible_opt1, flexible_opt2) with
                      | (Nothing, Nothing) ->
                          true
                      | (Just (FlexibleArrayMember _ ident1 qs1 ty1), Just (FlexibleArrayMember _ ident2 qs2 ty2)) ->
                          ident1 = ident2 && are_compatible_aux (qs1, ty1) (qs2, ty2)
                      | _ ->
                          false
                    end

              | _ ->
                  error "Ctype_aux.are_compatible_aux: failed to lookup a struct definition"
            end
          else
            false
    | (Union tag1, Union tag2) ->
        (* STD §6.2.7#1 *)
        (* TODO: being conservative here (aka STD compliant) *)
        if Symbol.from_same_translation_unit tag1 tag2 then
          tag1 = tag2
        else
          let (tag_str1, tag_str2) =
            match (tag1, tag2) with
              | (Symbol.Symbol _ _ (Symbol.SD_Id tag_str1), Symbol.Symbol _ _ (Symbol.SD_Id tag_str2)) ->
                  (tag_str1, tag_str2)
              | _ ->
                  error "Ctype_aux.are_compatible_aux: failed to destruct a union tags"
            end in
          if tag_str1 = tag_str2 then
            match (Map.lookup tag1 tagDefs1, Map.lookup tag2 tagDefs2) with
              | (Nothing, Nothing) ->
                  true
              | (Just _, Nothing) ->
                  true
              | (Nothing, Just _) ->
                  true
              | (Just (_, UnionDef xs1), Just (_, UnionDef xs2)) ->
                  if List.length xs1 <> List.length xs2 then
                    false
                  else
                    List.all (fun ((ident1, (_, _(*TODO alignment*), qs1, ty1)), (ident2, (_, _(*TODO alignment*), qs2, ty2))) ->
                      ident1 = ident2 && are_compatible_aux (qs1, ty1) (qs2, ty2)
                    ) (List.zip xs1 xs2)
              | _ ->
                  error "Ctype_aux.are_compatible_aux: failed to lookup a union definition"
            end
          else
            false
    | (Atomic atom_ty1, Atomic atom_ty2) ->
        are_compatible_aux (no_qualifiers, atom_ty1) (no_qualifiers, atom_ty2)
    | _ ->
        (* TODO: we can't see Enum types here and there is some impl-def stuff *)
        false
  end

and are_compatible_params_aux env acc = function
  | ([], []) ->
      acc
  | (((qs1, ty1, _) :: params1), ((qs2, ty2, _) :: params2)) ->
      are_compatible_params_aux env (
        (* STD (§6.7.6.3#15) the unqualified versions of the parameters types are compared *)
        acc && are_compatible_aux env (no_qualifiers, ty1) (no_qualifiers, ty2)
      ) (params1, params2)
  | _ ->
      (* the list of params must have the same length to be compatible *)
      false
end

and are_compatible_params env params1 params2 =
  are_compatible_params_aux env true (params1, params2)


let are_compatible qs_ty1 qs_ty2 =
  (* let tagDefs = Map_extra.fold (fun k v acc ->
    match k with
      | Symbol.Symbol _ _ (Symbol.SD_Id str) ->
          Map.insert str v acc
      | _ ->
          error "Ctype_aux.are_compatible"
    end
  ) (tagDefs ()) Map.empty in *)
  let tagDefs = tagDefs () in
  are_compatible_aux (tagDefs, tagDefs) qs_ty1 qs_ty2

(*
val tags_are_compatible: Symbol.sym -> Symbol.sym -> bool
let tags_are_compatible tag_sym1 tag_sym2 =
  let members_are_compatibles xs1 xs2 =
    if List.length xs1 <> List.length xs2 then
      false
    else
      List.all (fun ((ident1, ty1), (ident2, ty2)) ->
        ident1 = ident2 && 
      ) (List.combine xs1)
  
  if from_same_translation_unit tag_sym1 tag_sym2 then
    tag_sym1 = tag_sym2
  else
    (* TODO: temporary hack *)
    let Symbol.Symbol _ _ str_opt1 = tag_sym1 in
    let Symbol.Symbol _ _ str_opt2 = tag_sym2 in
    if str_opt1 = str_opt2 then
      match (get_membersDefs tag_sym1, get_membersDefs tag_sym2) with
        | (StructDef xs1, StructDef xs2) ->
            members_are_compatibles xs1 x2
        | (UnionDef xs1, UnionDef xs2) ->
            members_are_compatibles xs1 xs2
        | _ ->
            false
      end
    else
      false
*)

(*
  | StructDef of list (Symbol.identifier * ctype)
  | UnionDef of list (Symbol.identifier * ctype)
*)

type integer_type_match =
  | MatchedItySigned of integerType
  | MatchedItyUnsigned of integerType
  | NotMatchedIty

let match_integer_ctype (Ctype _ ty_) =
  match ty_ with
    | Basic (Integer ity) ->
        if AilTypesAux.is_signed_ity ity then
          MatchedItySigned ity
        else
          MatchedItyUnsigned ity
    | _ ->
        NotMatchedIty
  end
